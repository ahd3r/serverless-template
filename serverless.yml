service: service-templatev2
frameworkVersion: '3'
plugins:
  - serverless-esbuild
  - serverless-latest-layer-version
  - serverless-iam-roles-per-function
  - serverless-offline

package:
  individually: true

custom:
  esbuild:
    minify: true
    packager: yarn
    external:
      - jsonpath
      - mongodb-client-encryption

  eventBus: ${opt:stage, 'dev'}-rc
  eventBusArn: ${ssm:/pc/EVENT_BUS_ARN}/${self:custom.eventBus}
  table: ${opt:stage, 'dev'}-${self:service}-DB

provider:
  name: aws
  runtime: nodejs16.x
  architecture: arm64
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  apiGateway:
    shouldStartNameWithService: true
  layers: arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${self:provider.stage}-slsDependencies:latest
  environment:
    SERVICE_NAME: ${self:service}
    EVENTS_BUS: ${self:custom.eventBus}
    TABLE_NAME: ${self:custom.table}
    LOG_LEVEL: info
    STAGE: ${self:provider.stage}

functions:
  createAddress:
    handler: src/api/user-address/validate-emit/handler.main
    maximumRetryAttempts: 0
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - events:PutEvents
          - events:TestEventPattern
        Resource: ${self:custom.eventBusArn}
    events:
      - eventBridge:
          eventBus: ${self:custom.eventBusArn}
          pattern:
            detail-type:
              - test-pattern

  getAddress:
    handler: src/api/user-address/sync/handler.main
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.table}
    events:
      - http:
          path: /addresses/{userId}
          method: get
          cors: true
resources:
  Resources:
    testTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.table}
        AttributeDefinitions:
          - AttributeName: 'pk'
            AttributeType: 'S'
          - AttributeName: 'sk'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'pk'
            KeyType: 'HASH'
          - AttributeName: 'sk'
            KeyType: 'RANGE'
        BillingMode: 'PAY_PER_REQUEST'
